{"ast":null,"code":"var _jsxFileName = \"/Users/yoshinoseiji/Programming/Tinder_clone/backend/frontend/src/screens/MessageScreen.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport axios from \"axios\";\nimport Box from \"@material-ui/core/Box\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport FavoriteIcon from \"@material-ui/icons/Favorite\";\nimport FavoriteBorderIcon from \"@material-ui/icons/FavoriteBorder\";\nimport MessageHeader from \"../components/MessageScreen/MessageHeader\";\nimport MessageFooter from \"../components/MessageScreen/MessageFooter\";\nimport MessageBubble from \"../components/MessageScreen/MessageBubble\";\nimport Loader from \"../components/Loader\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction MessageScreen({\n  match,\n  history\n}) {\n  _s();\n\n  const [chatUserInfo, setChatUserInfo] = useState();\n  const [loading, setLoading] = useState(false);\n  const chatUserId = match.params.id;\n  const userLogin = useSelector(state => state.userLogin);\n  const {\n    userInfo\n  } = userLogin;\n  const [messages, setMessages] = useState([]);\n  const config = {\n    headers: {\n      \"content-type\": \"application/json\",\n      Authorization: `Bearer ${userInfo.token}`\n    }\n  };\n\n  const goodHandler = async message => {\n    const targetMessage = await axios.put(`/api/messages/good/update/${message.id}/`, {}, config);\n\n    if (targetMessage) {\n      const _messages = await axios.get(`/api/messages/${userInfo.id}/${chatUserId}/`, config);\n\n      setMessages(_messages.data);\n    }\n  };\n\n  useEffect(async () => {\n    if (!userInfo) {\n      history.push(\"/login\");\n    } else if (!chatUserInfo) {\n      const {\n        data\n      } = await axios.get(`/api/users/cards/id/${chatUserId}/`, config);\n      setChatUserInfo(data);\n    }\n  }, [history, userInfo, chatUserInfo]);\n  useEffect(() => {\n    setLoading(true);\n    let isMounted = true;\n    setInterval(async () => {\n      if (isMounted) {\n        const _messages = await axios.get(`/api/messages/${userInfo.id}/${chatUserId}`, config);\n\n        setMessages(_messages.data);\n        await axios.put(\"/api/messages/read/\", {\n          messages: JSON.stringify(_messages.data),\n          fromUserId: userInfo.id\n        }, config);\n        setLoading(false);\n      }\n    }, 1000);\n    return () => isMounted = false;\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Box, {\n    children: loading ? /*#__PURE__*/_jsxDEV(Loader, {\n      style: {\n        marginTop: \"50vh\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(Box, {\n      children: [/*#__PURE__*/_jsxDEV(MessageHeader, {\n        chatUserInfo: chatUserInfo && chatUserInfo\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        direction: \"column\",\n        spacing: 1,\n        style: {\n          overflowY: \"scroll\",\n          maxHeight: \"100vh\",\n          padding: \"9rem 1rem 20rem\",\n          flexWrap: \"nowrap\",\n          zIndex: \"-1\"\n        },\n        className: \"max-width\",\n        children: [messages.length > 0 && messages.map(message => /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          style: {\n            position: \"relative\",\n            width: \"100%\"\n          },\n          children: message.user_id == chatUserId ? /*#__PURE__*/_jsxDEV(Box, {\n            display: \"flex\",\n            justifyContent: \"flex-start\",\n            mr: 5,\n            children: [/*#__PURE__*/_jsxDEV(Avatar, {\n              src: chatUserInfo ? chatUserInfo.image : \"/images/unknown.png\",\n              alt: \"Profile Photo\",\n              style: {\n                height: \"3rem\",\n                width: \"3rem\",\n                marginRight: \"1rem\"\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 128,\n              columnNumber: 23\n            }, this), /*#__PURE__*/_jsxDEV(MessageBubble, {\n              bgColor: \"#dddddd\",\n              color: \"#000\",\n              text: message.text\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 142,\n              columnNumber: 23\n            }, this), /*#__PURE__*/_jsxDEV(Box, {\n              position: \"absolute\",\n              right: \"1rem\",\n              top: \"50%\",\n              style: {\n                transform: \"translateY(-50%)\"\n              },\n              children: message.good ? /*#__PURE__*/_jsxDEV(FavoriteIcon, {\n                onClick: () => goodHandler(message),\n                style: {\n                  color: \"#f50057\"\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 155,\n                columnNumber: 27\n              }, this) : /*#__PURE__*/_jsxDEV(FavoriteBorderIcon, {\n                onClick: () => goodHandler(message)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 160,\n                columnNumber: 27\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 148,\n              columnNumber: 23\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 21\n          }, this) : /*#__PURE__*/_jsxDEV(Box, {\n            display: \"flex\",\n            justifyContent: \"flex-end\",\n            ml: 5,\n            children: [message.good && /*#__PURE__*/_jsxDEV(FavoriteIcon, {\n              fontSize: \"small\",\n              style: {\n                color: \"#f50057\"\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 169,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(MessageBubble, {\n              bgColor: \"#46b3e6\",\n              color: \"#fff\",\n              text: message.text\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 174,\n              columnNumber: 23\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 167,\n            columnNumber: 21\n          }, this)\n        }, message.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 17\n        }, this)), messages.length === 0 && /*#__PURE__*/_jsxDEV(Box, {\n          children: /*#__PURE__*/_jsxDEV(Box, {\n            height: \"100vh\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 185,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          id: \"latest_message\",\n          visibility: \"hidden\",\n          children: \"latest message\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(MessageFooter, {\n        chatUserId: chatUserId,\n        setMessages: setMessages\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 5\n  }, this);\n}\n\n_s(MessageScreen, \"HiAuIW2YGwP4faiJVguTFP1a7Zw=\", false, function () {\n  return [useSelector];\n});\n\n_c = MessageScreen;\nexport default MessageScreen;\n\nvar _c;\n\n$RefreshReg$(_c, \"MessageScreen\");","map":{"version":3,"sources":["/Users/yoshinoseiji/Programming/Tinder_clone/backend/frontend/src/screens/MessageScreen.jsx"],"names":["React","useState","useEffect","useSelector","axios","Box","Grid","Avatar","FavoriteIcon","FavoriteBorderIcon","MessageHeader","MessageFooter","MessageBubble","Loader","MessageScreen","match","history","chatUserInfo","setChatUserInfo","loading","setLoading","chatUserId","params","id","userLogin","state","userInfo","messages","setMessages","config","headers","Authorization","token","goodHandler","message","targetMessage","put","_messages","get","data","push","isMounted","setInterval","JSON","stringify","fromUserId","marginTop","overflowY","maxHeight","padding","flexWrap","zIndex","length","map","position","width","user_id","image","height","marginRight","text","transform","good","color"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { useSelector } from \"react-redux\";\n\nimport axios from \"axios\";\n\nimport Box from \"@material-ui/core/Box\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport FavoriteIcon from \"@material-ui/icons/Favorite\";\nimport FavoriteBorderIcon from \"@material-ui/icons/FavoriteBorder\";\n\nimport MessageHeader from \"../components/MessageScreen/MessageHeader\";\nimport MessageFooter from \"../components/MessageScreen/MessageFooter\";\nimport MessageBubble from \"../components/MessageScreen/MessageBubble\";\nimport Loader from \"../components/Loader\";\n\nfunction MessageScreen({ match, history }) {\n  const [chatUserInfo, setChatUserInfo] = useState();\n  const [loading, setLoading] = useState(false);\n\n  const chatUserId = match.params.id;\n\n  const userLogin = useSelector((state) => state.userLogin);\n  const { userInfo } = userLogin;\n\n  const [messages, setMessages] = useState([]);\n\n  const config = {\n    headers: {\n      \"content-type\": \"application/json\",\n      Authorization: `Bearer ${userInfo.token}`,\n    },\n  };\n\n  const goodHandler = async (message) => {\n    const targetMessage = await axios.put(\n      `/api/messages/good/update/${message.id}/`,\n      {},\n      config\n    );\n\n    if (targetMessage) {\n      const _messages = await axios.get(\n        `/api/messages/${userInfo.id}/${chatUserId}/`,\n        config\n      );\n\n      setMessages(_messages.data);\n    }\n  };\n\n  useEffect(async () => {\n    if (!userInfo) {\n      history.push(\"/login\");\n    } else if (!chatUserInfo) {\n      const { data } = await axios.get(\n        `/api/users/cards/id/${chatUserId}/`,\n        config\n      );\n\n      setChatUserInfo(data);\n    }\n  }, [history, userInfo, chatUserInfo]);\n\n  useEffect(() => {\n    setLoading(true);\n\n    let isMounted = true;\n\n    setInterval(async () => {\n      if (isMounted) {\n        const _messages = await axios.get(\n          `/api/messages/${userInfo.id}/${chatUserId}`,\n          config\n        );\n\n        setMessages(_messages.data);\n\n        await axios.put(\n          \"/api/messages/read/\",\n          {\n            messages: JSON.stringify(_messages.data),\n            fromUserId: userInfo.id,\n          },\n          config\n        );\n\n        setLoading(false);\n      }\n    }, 1000);\n\n    return () => (isMounted = false);\n  }, []);\n\n  return (\n    <Box>\n      {loading ? (\n        <Loader style={{ marginTop: \"50vh\" }} />\n      ) : (\n        <Box>\n          <MessageHeader chatUserInfo={chatUserInfo && chatUserInfo} />\n\n          <Grid\n            container\n            direction=\"column\"\n            spacing={1}\n            style={{\n              overflowY: \"scroll\",\n              maxHeight: \"100vh\",\n              padding: \"9rem 1rem 20rem\",\n              flexWrap: \"nowrap\",\n              zIndex: \"-1\",\n            }}\n            className=\"max-width\"\n          >\n            {messages.length > 0 &&\n              messages.map((message) => (\n                <Grid\n                  item\n                  key={message.id}\n                  style={{\n                    position: \"relative\",\n                    width: \"100%\",\n                  }}\n                >\n                  {message.user_id == chatUserId ? (\n                    <Box display=\"flex\" justifyContent=\"flex-start\" mr={5}>\n                      <Avatar\n                        src={\n                          chatUserInfo\n                            ? chatUserInfo.image\n                            : \"/images/unknown.png\"\n                        }\n                        alt=\"Profile Photo\"\n                        style={{\n                          height: \"3rem\",\n                          width: \"3rem\",\n                          marginRight: \"1rem\",\n                        }}\n                      ></Avatar>\n\n                      <MessageBubble\n                        bgColor=\"#dddddd\"\n                        color=\"#000\"\n                        text={message.text}\n                      />\n\n                      <Box\n                        position=\"absolute\"\n                        right=\"1rem\"\n                        top=\"50%\"\n                        style={{ transform: \"translateY(-50%)\" }}\n                      >\n                        {message.good ? (\n                          <FavoriteIcon\n                            onClick={() => goodHandler(message)}\n                            style={{ color: \"#f50057\" }}\n                          ></FavoriteIcon>\n                        ) : (\n                          <FavoriteBorderIcon\n                            onClick={() => goodHandler(message)}\n                          ></FavoriteBorderIcon>\n                        )}\n                      </Box>\n                    </Box>\n                  ) : (\n                    <Box display=\"flex\" justifyContent=\"flex-end\" ml={5}>\n                      {message.good && (\n                        <FavoriteIcon\n                          fontSize=\"small\"\n                          style={{ color: \"#f50057\" }}\n                        ></FavoriteIcon>\n                      )}\n                      <MessageBubble\n                        bgColor=\"#46b3e6\"\n                        color=\"#fff\"\n                        text={message.text}\n                      />\n                    </Box>\n                  )}\n                </Grid>\n              ))}\n            {messages.length === 0 && (\n              <Box>\n                <Box height=\"100vh\"></Box>\n              </Box>\n            )}\n            <Box id=\"latest_message\" visibility=\"hidden\">\n              latest message\n            </Box>\n          </Grid>\n          <MessageFooter chatUserId={chatUserId} setMessages={setMessages} />\n        </Box>\n      )}\n    </Box>\n  );\n}\n\nexport default MessageScreen;\n"]},"metadata":{},"sourceType":"module"}