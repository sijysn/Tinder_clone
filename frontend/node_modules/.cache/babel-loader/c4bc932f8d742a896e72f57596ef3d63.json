{"ast":null,"code":"var _jsxFileName = \"/Users/yoshinoseiji/Programming/Tinder_clone/backend/frontend/src/screens/RecsScreen.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport ScopedCssBaseline from \"@material-ui/core/ScopedCssBaseline\";\nimport Alert from \"@material-ui/lab/Alert\";\nimport CommonHeader from \"../components/CommonHeader\";\nimport SwipeableCards from \"../components/RecsScreen/SwipeableCards\";\nimport SwipeButtons from \"../components/RecsScreen/SwipeButtons\";\nimport Empty from \"../components/RecsScreen/Empty\";\nimport Loader from \"../components/Loader\";\nimport { getUserDetails } from \"../actions/userActions\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst RecsScreen = ({\n  history\n}) => {\n  _s();\n\n  const [isFinished, setIsFinished] = useState(false);\n\n  const cardIsEmpty = () => setIsFinished(true);\n\n  const userLogin = useSelector(state => state.userLogin);\n  const {\n    loading,\n    error,\n    userInfo\n  } = userLogin;\n  const userDetails = useSelector(state => state.userDetails);\n  const {\n    user\n  } = userDetails;\n  const dispatch = useDispatch();\n  useEffect(() => {\n    if (!userInfo) {\n      history.push(\"/login\");\n    } else if (!user) {\n      dispatch(getUserDetails());\n    }\n  }, [history, userInfo, user]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(CommonHeader, {\n      recs: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), loading ? /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }, this) : error ? /*#__PURE__*/_jsxDEV(Alert, {\n      severity: \"error\",\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }, this) : userInfo && /*#__PURE__*/_jsxDEV(ScopedCssBaseline, {\n      children: [isFinished ? /*#__PURE__*/_jsxDEV(Empty, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 15\n      }, this) : /*#__PURE__*/_jsxDEV(SwipeableCards, {\n        cardIsEmpty: cardIsEmpty\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(SwipeButtons, {\n        cardIsEmpty: cardIsEmpty\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n};\n\n_s(RecsScreen, \"qkDn3rKATMMWwXQiEObLhbnAE/M=\", false, function () {\n  return [useSelector, useSelector, useDispatch];\n});\n\n_c = RecsScreen;\nexport default RecsScreen;\n\nvar _c;\n\n$RefreshReg$(_c, \"RecsScreen\");","map":{"version":3,"sources":["/Users/yoshinoseiji/Programming/Tinder_clone/backend/frontend/src/screens/RecsScreen.jsx"],"names":["React","useState","useEffect","useSelector","useDispatch","ScopedCssBaseline","Alert","CommonHeader","SwipeableCards","SwipeButtons","Empty","Loader","getUserDetails","RecsScreen","history","isFinished","setIsFinished","cardIsEmpty","userLogin","state","loading","error","userInfo","userDetails","user","dispatch","push","message"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AAEA,OAAOC,iBAAP,MAA8B,qCAA9B;AACA,OAAOC,KAAP,MAAkB,wBAAlB;AAEA,OAAOC,YAAP,MAAyB,4BAAzB;AACA,OAAOC,cAAP,MAA2B,yCAA3B;AACA,OAAOC,YAAP,MAAyB,uCAAzB;AACA,OAAOC,KAAP,MAAkB,gCAAlB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AAEA,SAASC,cAAT,QAA+B,wBAA/B;;;AAEA,MAAMC,UAAU,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAiB;AAAA;;AAClC,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8Bf,QAAQ,CAAC,KAAD,CAA5C;;AAEA,QAAMgB,WAAW,GAAG,MAAMD,aAAa,CAAC,IAAD,CAAvC;;AAEA,QAAME,SAAS,GAAGf,WAAW,CAAEgB,KAAD,IAAWA,KAAK,CAACD,SAAlB,CAA7B;AACA,QAAM;AAAEE,IAAAA,OAAF;AAAWC,IAAAA,KAAX;AAAkBC,IAAAA;AAAlB,MAA+BJ,SAArC;AAEA,QAAMK,WAAW,GAAGpB,WAAW,CAAEgB,KAAD,IAAWA,KAAK,CAACI,WAAlB,CAA/B;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAWD,WAAjB;AAEA,QAAME,QAAQ,GAAGrB,WAAW,EAA5B;AAEAF,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI,CAACoB,QAAL,EAAe;AACbR,MAAAA,OAAO,CAACY,IAAR,CAAa,QAAb;AACD,KAFD,MAEO,IAAI,CAACF,IAAL,EAAW;AAChBC,MAAAA,QAAQ,CAACb,cAAc,EAAf,CAAR;AACD;AACF,GANQ,EAMN,CAACE,OAAD,EAAUQ,QAAV,EAAoBE,IAApB,CANM,CAAT;AAQA,sBACE;AAAA,4BACE,QAAC,YAAD;AAAc,MAAA,IAAI;AAAlB;AAAA;AAAA;AAAA;AAAA,YADF,EAEGJ,OAAO,gBACN,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,YADM,GAEJC,KAAK,gBACP,QAAC,KAAD;AAAO,MAAA,QAAQ,EAAC,OAAhB;AAAA,gBAAyBM;AAAzB;AAAA;AAAA;AAAA;AAAA,YADO,GAGPL,QAAQ,iBACN,QAAC,iBAAD;AAAA,iBACGP,UAAU,gBACT,QAAC,KAAD;AAAA;AAAA;AAAA;AAAA,cADS,gBAGT,QAAC,cAAD;AAAgB,QAAA,WAAW,EAAEE;AAA7B;AAAA;AAAA;AAAA;AAAA,cAJJ,eAME,QAAC,YAAD;AAAc,QAAA,WAAW,EAAEA;AAA3B;AAAA;AAAA;AAAA;AAAA,cANF;AAAA;AAAA;AAAA;AAAA;AAAA,YARN;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAqBD,CA1CD;;GAAMJ,U;UAKcV,W,EAGEA,W,EAGHC,W;;;KAXbS,U;AA4CN,eAAeA,UAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\n\nimport ScopedCssBaseline from \"@material-ui/core/ScopedCssBaseline\";\nimport Alert from \"@material-ui/lab/Alert\";\n\nimport CommonHeader from \"../components/CommonHeader\";\nimport SwipeableCards from \"../components/RecsScreen/SwipeableCards\";\nimport SwipeButtons from \"../components/RecsScreen/SwipeButtons\";\nimport Empty from \"../components/RecsScreen/Empty\";\nimport Loader from \"../components/Loader\";\n\nimport { getUserDetails } from \"../actions/userActions\";\n\nconst RecsScreen = ({ history }) => {\n  const [isFinished, setIsFinished] = useState(false);\n\n  const cardIsEmpty = () => setIsFinished(true);\n\n  const userLogin = useSelector((state) => state.userLogin);\n  const { loading, error, userInfo } = userLogin;\n\n  const userDetails = useSelector((state) => state.userDetails);\n  const { user } = userDetails;\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if (!userInfo) {\n      history.push(\"/login\");\n    } else if (!user) {\n      dispatch(getUserDetails());\n    }\n  }, [history, userInfo, user]);\n\n  return (\n    <div>\n      <CommonHeader recs />\n      {loading ? (\n        <Loader />\n      ) : error ? (\n        <Alert severity=\"error\">{message}</Alert>\n      ) : (\n        userInfo && (\n          <ScopedCssBaseline>\n            {isFinished ? (\n              <Empty />\n            ) : (\n              <SwipeableCards cardIsEmpty={cardIsEmpty} />\n            )}\n            <SwipeButtons cardIsEmpty={cardIsEmpty} />\n          </ScopedCssBaseline>\n        )\n      )}\n    </div>\n  );\n};\n\nexport default RecsScreen;\n"]},"metadata":{},"sourceType":"module"}